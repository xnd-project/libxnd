
# ==============================================================================
#                          Unix Makefile for libxnd
# ==============================================================================


LIBSTATIC = @LIBSTATIC@
LIBNAME = @LIBNAME@
LIBSONAME = @LIBSONAME@
LIBSHARED = @LIBSHARED@

CC = @CC@
LD = @LD@
AR = @AR@
RANLIB = @RANLIB@
CUDA_CXX = @CUDA_CXX@

XND_INCLUDES = @CONFIGURE_INCLUDES@

CONFIGURE_CFLAGS = @CONFIGURE_CFLAGS@
XND_CFLAGS = $(strip -I.. -I$(XND_INCLUDES) $(CONFIGURE_CFLAGS) $(CFLAGS))
XND_CFLAGS_SHARED = $(XND_CFLAGS) -fPIC

CONFIGURE_CXXFLAGS = @CONFIGURE_CXXFLAGS@
XND_CXXFLAGS = $(strip -I.. -I$(XND_INCLUDES) $(CONFIGURE_CXXFLAGS) $(CXXFLAGS))
XND_CXXFLAGS_SHARED = $(XND_CXXFLAGS) -fPIC

CONFIGURE_LDFLAGS = @CONFIGURE_LDFLAGS@
XND_LDFLAGS = $(strip $(CONFIGURE_LDFLAGS) $(LDFLAGS))

CONFIGURE_CUDA_CXXFLAGS = @CONFIGURE_CUDA_CXXFLAGS@
GM_CUDA_CXXFLAGS = $(strip $(CONFIGURE_CUDA_CXXFLAGS) $(CUDA_CXXFLAGS))


default: $(LIBSTATIC) $(LIBSHARED)


OBJS = bitmaps.o bounds.o copy.o equal.o identical.o shape.o split.o xnd.o

SHARED_OBJS = .objs/bitmaps.o .objs/bounds.o .objs/copy.o .objs/equal.o .objs/identical.o .objs/shape.o .objs/split.o .objs/xnd.o

ifdef CUDA_CXX
OBJS += cuda_memory.o
SHARED_OBJS += .objs/cuda_memory.o
endif


$(LIBSTATIC): Makefile $(OBJS)
	$(AR) rc $(LIBSTATIC) $(OBJS)
	$(RANLIB) $(LIBSTATIC)

$(LIBSHARED): Makefile $(SHARED_OBJS)
	$(LD) $(XND_LDFLAGS) -o $(LIBSHARED) $(SHARED_OBJS)
	ln -sf $(LIBSHARED) $(LIBNAME)
	ln -sf $(LIBSHARED) $(LIBSONAME)


bitmaps.o:\
Makefile bitmaps.c xnd.h
	$(CC) $(XND_CFLAGS) -c bitmaps.c

.objs/bitmaps.o:\
Makefile bitmaps.c xnd.h
	$(CC) $(XND_CFLAGS_SHARED) -c bitmaps.c -o .objs/bitmaps.o

bounds.o:\
Makefile bounds.c xnd.h
	$(CC) $(XND_CFLAGS) -c bounds.c

.objs/bounds.o:\
Makefile bounds.c xnd.h
	$(CC) $(XND_CFLAGS_SHARED) -c bounds.c -o .objs/bounds.o

copy.o:\
Makefile copy.c xnd.h
	$(CC) $(XND_CFLAGS) -c copy.c

.objs/copy.o:\
Makefile copy.c xnd.h
	$(CC) $(XND_CFLAGS_SHARED) -c copy.c -o .objs/copy.o

equal.o:\
Makefile equal.c xnd.h
	$(CC) $(XND_CFLAGS) -c equal.c

.objs/equal.o:\
Makefile equal.c xnd.h
	$(CC) $(XND_CFLAGS_SHARED) -c equal.c -o .objs/equal.o

identical.o:\
Makefile identical.c xnd.h
	$(CC) $(XND_CFLAGS) -c identical.c

.objs/identical.o:\
Makefile identical.c xnd.h
	$(CC) $(XND_CFLAGS_SHARED) -c identical.c -o .objs/identical.o

shape.o:\
Makefile shape.c overflow.h xnd.h
	$(CC) $(XND_CFLAGS) -c shape.c

.objs/shape.o:\
Makefile shape.c overflow.h xnd.h
	$(CC) $(XND_CFLAGS_SHARED) -c shape.c -o .objs/shape.o

split.o:\
Makefile split.c overflow.h xnd.h
	$(CC) $(XND_CFLAGS) -c split.c

.objs/split.o:\
Makefile split.c overflow.h xnd.h
	$(CC) $(XND_CFLAGS_SHARED) -c split.c -o .objs/split.o

xnd.o:\
Makefile xnd.c xnd.h
	$(CC) $(XND_CFLAGS) -c xnd.c

.objs/xnd.o:\
Makefile xnd.c xnd.h
	$(CC) $(XND_CFLAGS_SHARED) -c xnd.c -o .objs/xnd.o


# Cuda
cuda_memory.o:\
Makefile cuda/cuda_memory.cu cuda/cuda_memory.h
	$(CUDA_CXX) --compiler-options "$(XND_CXXFLAGS)" $(GM_CUDA_CXXFLAGS) -c cuda/cuda_memory.cu

.objs/cuda_memory.o:\
Makefile cuda/cuda_memory.cu cuda/cuda_memory.h
	$(CUDA_CXX) --compiler-options "$(XND_CXXFLAGS_SHARED)" $(GM_CUDA_CXXFLAGS) -c cuda/cuda_memory.cu -o .objs/cuda_memory.o


# Coverage
coverage:\
Makefile clean runtest
	./tests/runtest
	for file in *.c; do gcov -l "$$file" > /dev/null 2>&1; done

FORCE:

clean: FORCE
	rm -f *.o *.so *.gch *.gcda *.gcno *.gcov *.dyn *.dpi *.lock
	rm -f $(LIBSTATIC) $(LIBSHARED) $(LIBSONAME) $(LIBNAME)
	cd .objs && rm -f *.o *.so *.gch *.gcda *.gcno *.gcov *.dyn *.dpi *.lock

distclean: clean
	rm -f Makefile



